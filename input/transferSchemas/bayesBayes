import bayes
import transferSchemas/numNum

tSchema basicA:(bayesG,bayesG) =
    source t:A:event
    target t':A:event
    antecedent
    consequent ([t:A:event],[t':A:event]) :: match
    strength 1.0

tSchema basicB:(bayesG,bayesG) =
    source t:B:event
    target t':B:event
    antecedent
    consequent ([t:B:event],[t':B:event]) :: match
    strength 1.0

tSchema matchNot:(bayesG,bayesG) =
    source t:event <- complement[t1:overline,t2:event]
    target t':event <- complement[t1':overline,t2':event]
    antecedent ([t2:event],[t2':event]) :: match
    consequent ([t:event],[t':event]) :: match
    strength 1

tSchema matchInter:(bayesG,bayesG) =
    source t:event <- infix[t1:event,t2:inter,t3:event]
    target t':event <- infix[t1':event,t2':inter,t3':event]
    antecedent ([t1:event],[t1':event]) :: match, ([t3:event],[t3':event]) :: match
    consequent ([t:event],[t':event]) :: match
    strength 1

tSchema matchCond:(bayesG,bayesG) =
    source t:condEvent <- condition[t1:event,t2:cond,t3:event]
    target t':condEvent <- condition[t1':event,t2':cond,t3':event]
    antecedent ([t1:event],[t1':event]) :: match, ([t3:event],[t3':event]) :: match
    consequent ([t:condEvent],[t':condEvent]) :: match
    strength 1

tSchema matchProb:(bayesG,bayesG) =
    source t:probEqn <- prob[t1:events,t2:numExp]
    target t':probEqn <- prob[t1':events,t2':numExp]
    antecedent ([t1:events],[t1':events]) :: match, ([t2:numExp],[t2':numExp]) :: equal
    consequent ([t:probEqn],[t':probEqn]) :: entail
    strength 1

tSchema matchSys:(bayesG,bayesG) =
    source t:probSys <- addEqn[t1:probEqn,t2:probSys]
    target t':probSys <- addEqn[t1':probEqn,t2':probSys]
    antecedent ([t1:probEqn],[t1':probEqn]) :: entail, ([t2:probSys],[t2':probSys]) :: entail
    consequent ([t:probSys],[t':probSys]) :: entail
    strength 1

tSchema matchCalculate:(bayesG,bayesG) =
    source t:probSys <- calculate[t1:probSys,t2:events]
    target t':probSys <- calculate[t1':probSys,t2':events]
    antecedent ([t1:probSys],[t1':probSys]) :: entail, ([t2:events],[t2':events]) :: match
    consequent ([t:probSys],[t':probSys]) :: entail
    strength 1

tSchema commuteInter:(bayesG,bayesG) =
    source t:event <- infix[t1:event,t2:inter,t3:event]
    target t':event <- infix[t1':event,t2':inter,t3':event]
    antecedent ([t1:event],[t3':event]) :: match, ([t3:event],[t1':event]) :: match
    consequent ([t:event],[t':event]) :: match
    strength 3

tSchema bayesA:(bayesG,bayesG) =
    source t:probEqn <- prob[t1:event <- infix[t11:event,t12:inter,t13:event],
                             t2:numExp]
    target t':probSys <- addEqn[t2':probEqn <- prob[t21':event,t123':x:var],
                                t1':probEqn <- prob[t11':condEvent <- condition[t111':event,t112':cond,t113':event],
                                                    t12':numExp <- frac[t121':numExp,t122':div,t123':x:var]]]
    antecedent ([t11:event],[t111':event]) :: match, ([t13:event],[t113':event]) :: match, ([t13:event],[t21':event]) :: match, ([t2:numExp],[t121':numExp]) :: equal
    consequent ([t:probEqn],[t':probSys]) :: entail
    strength 2

tSchema bayesB:(bayesG,bayesG) =
    source t:probEqn <- prob[t1:condEvent <- condition[t11:event,t12:cond,t13:event],
                             t2:numExp]
    target t':probSys <- addEqn[t2':probEqn <- prob[t21':event,t122':y:var],
                                t1':probEqn <- prob[t11':event <- infix[t111':event,t112':inter,t113':event],
                                                    t12':numExp <- implicitMult[t121':numExp,t122':y:var]]]
    antecedent ([t11:event],[t111':event]) :: match, ([t13:event],[t113':event]) :: match, ([t13:event],[t21':event]) :: match, ([t2:numExp],[t121':numExp]) :: equal
    consequent ([t:probEqn],[t':probSys]) :: entail
    strength 2

tSchema total:(bayesG,bayesG) =
    source t:probEqn <- prob[t1:event <- infix[t11:event,t12:inter,t13:event],
                             t2:numExp]
    target t':probSys <- addEqn[t1':probEqn <- prob[t11':event,
                                                    t12':numExp <- infixOp[t121':numExp,t122':plus,t22':z:var]],
                                t2':probEqn <- prob[t21':event <- infix[t211':event,
                                                                        t212':inter,
                                                                        t213':event <- complement[t2131':overline,t2132':event]],
                                                    t22':z:var]]
    antecedent ([t11:event],[t11':event]) :: match, ([t11:event],[t211':event]) :: match, ([t13:event],[t2132':event]) :: match, ([t2:numExp],[t121':numExp]) :: equal
    consequent ([t:probEqn],[t':probSys]) :: entail
    strength 1