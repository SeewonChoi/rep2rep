import pl
import venn

tSchema not:(plG,vennG) =
    source t:plExp <- unaryOp[n:not,p:plExp]
    target t':diagram <- contrast[a:diagram]
    antecedent ([p:plExp],[a:diagram]) :: match
    consequent ([t:plExp],[t':diagram]) :: match
    strength 1.0

tSchema or:(plG,vennG) =
    source t:plExp <- infixOp[p:plExp,o:or,q:plExp]
    target t':diagram <- fillOr[a':diagram <- addCircles[a:diagram],
                                b':diagram <- addCircles[b:diagram]]
    antecedent ([p:plExp],[a:diagram]) :: match, ([q:plExp],[b:diagram]) :: match
    consequent ([t:plExp],[t':diagram]) :: match
    strength 1.0

tSchema and:(plG,vennG) =
    source t:plExp <- infixOp[p:plExp,o:and,q:plExp]
    target t':diagram <- fillAnd[a':diagram <- addCircles[a:diagram],
                                 b':diagram <- addCircles[b:diagram]]
    antecedent ([p:plExp],[a:diagram]) :: match, ([q:plExp],[b:diagram]) :: match
    consequent ([t:plExp],[t':diagram]) :: match
    strength 1.0

tSchema imply:(plG,vennG) =
    source t:plExp <- infixOp[p:plExp,o:imply,q:plExp]
    target t':diagram <- fillImply[a':diagram <- addCircles[a:diagram],
                                   b':diagram <- addCircles[b:diagram]]
    antecedent ([p:plExp],[a:diagram]) :: match, ([q:plExp],[b:diagram]) :: match
    consequent ([t:plExp],[t':diagram]) :: match
    strength 1.0

tSchema iff:(plG,vennG) =
    source t:plExp <- infixOp[p:plExp,o:iff,q:plExp]
    target t':diagram <- fillIff[a':diagram <- addCircles[a:diagram],
                                 b':diagram <- addCircles[b:diagram]]
    antecedent ([p:plExp],[a:diagram]) :: match, ([q:plExp],[b:diagram]) :: match
    consequent ([t:plExp],[t':diagram]) :: match
    strength 1.0

tSchema removeParentheses:(plG,vennG) =
    source t:plExp <- addParentheses[o:oB,p:plExp,c:cB]
    target t':diagram
    antecedent ([p:plExp],[t':diagram]) :: match
    consequent ([t:plExp],[t':diagram]) :: match
    strength 1.0

tSchema false:(plG,vennG) =
    source t:false
    target t':diagram <- contrast[t1:1]
    antecedent
    consequent ([t:false],[t':diagram]) :: match
    strength 1.0
 
tSchema true:(plG,vennG) =
    source t:true
    target t':1
    antecedent
    consequent ([t:true],[t':1]) :: match
    strength 1.0   

tSchema pVar:(plG,vennG) =
    source t:p:plExp
    target t':p:diagram
    antecedent
    consequent ([t:p:plExp],[t':p:diagram]) :: match
    strength 1.0

tSchema qVar:(plG,vennG) =
    source t:q:plExp
    target t':q:diagram
    antecedent
    consequent ([t:q:plExp],[t':q:diagram]) :: match
    strength 1.0

tSchema rVar:(plG,vennG) =
    source t:r:plExp
    target t':r:diagram
    antecedent
    consequent ([t:r:plExp],[t':r:diagram]) :: match
    strength 1.0
