import arith
import dotDiagrams
import metaLogic

typeSystem interArithDotsT =
    imports dotDiagrams, arith, metaLogicT
    types
    order

conSpec interArithDots:interArithDotsT =
    imports dotDiagramsG, arithG, metaLogic
    constructors
        count : [arr,numExp] -> metaBool,
        disjoint : [arr,arr] -> metaBool,
        formulaIsValid : [formula] -> metaBool,
        perpendicular : [line,line] -> metaBool

tSchema test:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- implicitMult[n:numExp,m:numExp]
    target t':rectangle <- fillRectangle[t1':line,t2':line]
    antecedent :metaTrue <- perpendicular[t1':line,t2':line],
               :metaTrue <- count[t3':arr <- intersect[t1':line,t2':line],l:1:numeral],
               :metaTrue <- count[t1':line,n:numExp],
               :metaTrue <- count[t2':line,m:numExp]
    consequent :metaTrue <- count[t':rectangle,t:numExp]
    strength 1

iSchema disjIntra1:(dotDiagramsG,interArithDots) =
    context t':arr <- join[t1:arr,t2:arr]
    antecedent :metaTrue <- disjoint[t'':arr,t1:arr],
               :metaTrue <- disjoint[t'':arr,t2:arr]
    consequent :metaTrue <- disjoint[t'':arr,t':arr]
    strength 2

iSchema disjIntra2:(dotDiagramsG,interArithDots) =
    context t':arr <- join[t1:arr,t2:arr]
    antecedent :metaTrue <- disjoint[t1:arr,t'':arr],
               :metaTrue <- disjoint[t2:arr,t'':arr]
    consequent :metaTrue <- disjoint[t':arr,t'':arr]
    strength 2

tSchema plusJoin:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- infixOp[n:numExp,p:plus,m:numExp]
    target t':arr <- join[a:arr,b:arr]
    antecedent :metaTrue <- count[a:arr,n:numExp],
               :metaTrue <- count[b:arr,m:numExp],
               :metaTrue <- disjoint[a:arr,b:arr]
    consequent :metaTrue <- count[t':arr,t:numExp]
    strength 2

tSchema doubleCounting:(arithG,dotDiagramsG,interArithDots) =
    source t:formula <- infixRel[n:numExp,e:equals,m:numExp]
    target t':arr
    antecedent :metaTrue <- count[t':arr,n:numExp],
               :metaTrue <- count[t':arr,m:numExp]
    consequent :metaTrue <- formulaIsValid[t:formula]
    strength 2

tSchema div2symmetry:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- frac[t1:numExp,line:div,t2:2:numeral]
    target t':arr <- manipulate[t1':arr <- remove[t2':arr,t':arr],t2':manipulation]
    antecedent :metaTrue <- count[t2':arr,t1:numExp]
    consequent :metaTrue <- count[t':arr,t:numExp]
    strength 2

tSchema parenthesesSuperfluous:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- addParentheses[toB:oB,x:numExp,tcB:cB]
    target t':arr
    antecedent :metaTrue <- count[t':arr,x:numExp]
    consequent :metaTrue <- count[t':arr,t:numExp]
    strength 2

comment multRectangle:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- implicitMult[t1:numExp,t2:numExp]
    target t':arr <- makeRectangle[t1':arr,t2':arr]
    antecedent :metaTrue <- count[t1':arr,t1:numExp],
               :metaTrue <- count[t2':arr,t2:numExp],
               :metaTrue <- canRectangulate[t1':arr,t2':arr]
    consequent :metaTrue <- count[t':arr,t:numExp]
    strength 2

tSchema some:(arithG,dotDiagramsG,interArithDots) =
    source t:?v:numeral
    target t':line <- someLine[t1':?v:numeral]
    antecedent
    consequent :metaTrue <- count[t':line,t:?v:numeral]
    strength 1
