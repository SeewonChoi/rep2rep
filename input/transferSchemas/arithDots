import arith
import dotDiagrams
import metaLogic

typeSystem interArithDotsT =
    imports dotDiagrams, arith, metaLogicT
    types
    order

conSpec interArithDots:interArithDotsT =
    imports dotDiagramsG, arithG, metaLogic
    constructors
        count : [arr,numExp] -> metaBool,
        disjoint : [arr,arr] -> metaBool,
        formulaIsValid : [formula] -> metaBool,
        canRectangulate : [arr,arr] -> metaBool

iSchema disjIntra1:(dotDiagramsG,interArithDots) =
    context t':arr <- join[t1:arr,t2:arr]
    antecedent :metaTrue <- disjoint[t'':arr,t1:arr],
               :metaTrue <- disjoint[t'':arr,t2:arr]
    consequent :metaTrue <- disjoint[t'':arr,t':arr]
    strength 1.1

iSchema disjIntra2:(dotDiagramsG,interArithDots) =
    context t':arr <- join[t1:arr,t2:arr]
    antecedent :metaTrue <- disjoint[t1:arr,t'':arr],
               :metaTrue <- disjoint[t2:arr,t'':arr]
    consequent :metaTrue <- disjoint[t':arr,t'':arr]
    strength 1.1

tSchema plusJoin:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- infixOp[n:numExp,p:plus,m:numExp]
    target t':arr <- join[a:arr,b:arr]
    antecedent :metaTrue <- count[a:arr,n:numExp],
               :metaTrue <- count[b:arr,m:numExp],
               :metaTrue <- disjoint[a:arr,b:arr]
    consequent :metaTrue <- count[t':arr,t:numExp]
    pull :metaTrue <- disjoint[x:arr,y:arr] to [a:arr,b:arr]
    strength 1

tSchema doubleCounting:(arithG,dotDiagramsG,interArithDots) =
    source t:formula <- infixRel[n:numExp,e:equals,m:numExp]
    target t':arr
    antecedent :metaTrue <- count[t':arr,n:numExp],
               :metaTrue <- count[t':arr,m:numExp]
    consequent :metaTrue <- formulaIsValid[t:formula]
    strength 1

tSchema div2symmetry:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- frac[t1:numExp,line:div,t2:2:numeral]
    target t':arr <- rotateX[t1':arr <- remove[t2':arr,t':arr]]
    antecedent :metaTrue <- count[t2':arr,t1:numExp]
    consequent :metaTrue <- count[t':arr,t:numExp]
    strength 1

tSchema parenthesesSuperfluous:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- addParentheses[toB:oB,x:numExp,tcB:cB]
    target t':arr
    antecedent :metaTrue <- count[t':arr,x:numExp]
    consequent :metaTrue <- count[t':arr,t:numExp]
    strength 1

tSchema multRectangle:(arithG,dotDiagramsG,interArithDots) =
    source t:numExp <- implicitMult[t1:numExp,t2:numExp]
    target t':arr <- makeRectangle[t1':arr,t2':arr]
    antecedent :metaTrue <- count[t1':arr,t1:numExp],
               :metaTrue <- count[t2':arr,t2:numExp],
               :metaTrue <- canRectangulate[t1':arr,t2':arr]
    consequent :metaTrue <- count[t':arr,t:numExp]
    strength 1

tSchema oneCirc:(arithG,dotDiagramsG,interArithDots) =
    source t:1:numeral
    target t':1:arr
    antecedent
    consequent :metaTrue <- count[t':\crc:arr,t:1:numeral]
    strength 1

tSchema twoCircs:(arithG,dotDiagramsG,interArithDots) =
    source t:2:numeral
    target t':2:arr
    antecedent
    consequent :metaTrue <- count[t':\oo:arr,t:2:numeral]
    strength 1

tSchema threeCircs:(arithG,dotDiagramsG,interArithDots) =
    source t:3:numeral
    target t':3:arr
    antecedent
    consequent :metaTrue <- count[t':\ooo:arr,t:3:numeral]
    strength 1

tSchema fourCircs:(arithG,dotDiagramsG,interArithDots) =
    source t:4:numeral
    target t':4:arr
    antecedent
    consequent :metaTrue <- count[t':\oooo:arr,t:4:numeral]
    strength 1

comment twoVertical:(arithG,dotDiagramsG,interArithDots) =
    source t:2:numeral
    target t':\ooV:arr
    antecedent
    consequent :metaTrue <- count[t':\ooV:arr,t:2:numeral]
    strength 1

comment threeVertical:(arithG,dotDiagramsG,interArithDots) =
    source t:3:numeral
    target t':\oooV:arr
    antecedent
    consequent :metaTrue <- count[t':\oooV:arr,t:3:numeral]
    strength 1

comment fourVertical:(arithG,dotDiagramsG,interArithDots) =
    source t:4:numeral
    target t':\ooooV:arr
    antecedent
    consequent :metaTrue <- count[t':\ooooV:arr,t:4:numeral]
    strength 1
