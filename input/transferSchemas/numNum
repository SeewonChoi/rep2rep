import arith
import metaLogic

typeSystem interNumNumT =
    imports arith, metaLogicT
    types
    order

conSpec interNumNum:interNumNumT =
    imports arithG, metaLogic
    constructors
        equal : [numExp,numExp] -> metaBool

tSchema equalNumeral:(arithG,arithG,interNumNum) =
    source t:?v:numeral
    target t':?v:numeral
    antecedent
    consequent :metaTrue <-equal[t:?v:numeral,t':?v:numeral]
    strength 1

tSchema equalVar:(arithG,arithG,interNumNum) =
    source t:?x:var
    target t':?x:var
    antecedent
    consequent :metaTrue <-equal[t:?x:var,t':?x:var]
    strength 1

tSchema equalPlus:(arithG,arithG,interNumNum) =
    source t:numExp <- infixOp[t1:numExp,t2:plus,t3:numExp]
    target t':numExp <- infixOp[t1':numExp,t2':plus,t3':numExp]
    antecedent :metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]
    consequent :metaTrue <-equal[t:numExp,t':numExp]
    strength 1

tSchema equalMinus:(arithG,arithG,interNumNum) =
    source t:numExp <- infixOp[t1:numExp,t2:minus,t3:numExp]
    target t':numExp <- infixOp[t1':numExp,t2':minus,t3':numExp]
    antecedent :metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]
    consequent :metaTrue <-equal[t:numExp,t':numExp]
    strength 1

tSchema equalDiv:(arithG,arithG,interNumNum) =
    source t:numExp <- infixOp[t1:numExp,t2:div,t3:numExp]
    target t':numExp <- infixOp[t1':numExp,t2':div,t3':numExp]
    antecedent :metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]
    consequent :metaTrue <-equal[t:numExp,t':numExp]
    strength 1
