import num

tSchema equalZero:(numG,numG) =
    source t:0:numeral
    target t':0:numeral
    antecedent
    consequent ([t:0:numeral],[t':0:numeral]) :: equal
    strength 1

tSchema equalOne:(numG,numG) =
    source t:1:numeral
    target t':1:numeral
    antecedent
    consequent ([t:1:numeral],[t':1:numeral]) :: equal
    strength 1

tSchema equalTwo:(numG,numG) =
    source t:2:numeral
    target t':2:numeral
    antecedent
    consequent ([t:2:numeral],[t':2:numeral]) :: equal
    strength 1

tSchema equalThree:(numG,numG) =
    source t:3:numeral
    target t':3:numeral
    antecedent
    consequent ([t:3:numeral],[t':3:numeral]) :: equal
    strength 1

tSchema equalFour:(numG,numG) =
    source t:4:numeral
    target t':4:numeral
    antecedent
    consequent ([t:4:numeral],[t':4:numeral]) :: equal
    strength 1

tSchema equalFive:(numG,numG) =
    source t:5:numeral
    target t':5:numeral
    antecedent
    consequent ([t:5:numeral],[t':5:numeral]) :: equal
    strength 1

tSchema equalSix:(numG,numG) =
    source t:6:numeral
    target t':6:numeral
    antecedent
    consequent ([t:6:numeral],[t':6:numeral]) :: equal
    strength 1

tSchema equalSeven:(numG,numG) =
    source t:7:numeral
    target t':7:numeral
    antecedent
    consequent ([t:7:numeral],[t':7:numeral]) :: equal
    strength 1

tSchema equalEight:(numG,numG) =
    source t:8:numeral
    target t':8:numeral
    antecedent
    consequent ([t:8:numeral],[t':8:numeral]) :: equal
    strength 1

tSchema equalNine:(numG,numG) =
    source t:9:numeral
    target t':9:numeral
    antecedent
    consequent ([t:9:numeral],[t':9:numeral]) :: equal
    strength 1

tSchema equalTen:(numG,numG) =
    source t:10:numeral
    target t':10:numeral
    antecedent
    consequent ([t:10:numeral],[t':10:numeral]) :: equal
    strength 1

tSchema equalHund:(numG,numG) =
    source t:100:numeral
    target t':100:numeral
    antecedent
    consequent ([t:100:numeral],[t':100:numeral]) :: equal
    strength 1

tSchema equalThou:(numG,numG) =
    source t:1000:numeral
    target t':1000:numeral
    antecedent
    consequent ([t:1000:numeral],[t':1000:numeral]) :: equal
    strength 1

tSchema equalFPOne:(numG,numG) =
    source t:0.1:numeral
    target t':0.1:numeral
    antecedent
    consequent ([t:0.1:numeral],[t':0.1:numeral]) :: equal
    strength 1

tSchema equalFPTwo:(numG,numG) =
    source t:0.2:numeral
    target t':0.2:numeral
    antecedent
    consequent ([t:0.2:numeral],[t':0.2:numeral]) :: equal
    strength 1

tSchema equalFPThree:(numG,numG) =
    source t:0.3:numeral
    target t':0.3:numeral
    antecedent
    consequent ([t:0.3:numeral],[t':0.3:numeral]) :: equal
    strength 1

tSchema equalFPFour:(numG,numG) =
    source t:0.4:numeral
    target t':0.4:numeral
    antecedent
    consequent ([t:0.4:numeral],[t':0.4:numeral]) :: equal
    strength 1

tSchema equalFPFive:(numG,numG) =
    source t:0.5:numeral
    target t':0.5:numeral
    antecedent
    consequent ([t:0.5:numeral],[t':0.5:numeral]) :: equal
    strength 1

tSchema equalFPSix:(numG,numG) =
    source t:0.6:numeral
    target t':0.6:numeral
    antecedent
    consequent ([t:0.6:numeral],[t':0.6:numeral]) :: equal
    strength 1

tSchema equalFPSeven:(numG,numG) =
    source t:0.7:numeral
    target t':0.7:numeral
    antecedent
    consequent ([t:0.7:numeral],[t':0.7:numeral]) :: equal
    strength 1

tSchema equalFPEight:(numG,numG) =
    source t:0.8:numeral
    target t':0.8:numeral
    antecedent
    consequent ([t:0.8:numeral],[t':0.8:numeral]) :: equal
    strength 1

tSchema equalFPNine:(numG,numG) =
    source t:0.9:numeral
    target t':0.9:numeral
    antecedent
    consequent ([t:0.9:numeral],[t':0.9:numeral]) :: equal
    strength 1

tSchema equalFPTwoFive:(numG,numG) =
    source t:0.25:numeral
    target t':0.25:numeral
    antecedent
    consequent ([t:0.25:numeral],[t':0.25:numeral]) :: equal
    strength 1

tSchema equalFPNineNine:(numG,numG) =
    source t:0.99:numeral
    target t':0.99:numeral
    antecedent
    consequent ([t:0.99:numeral],[t':0.99:numeral]) :: equal
    strength 1

tSchema equalFPNineNineNine:(numG,numG) =
    source t:0.999:numeral
    target t':0.999:numeral
    antecedent
    consequent ([t:0.999:numeral],[t':0.999:numeral]) :: equal
    strength 1

tSchema equalFPZeroOne:(numG,numG) =
    source t:0.01:numeral
    target t':0.01:numeral
    antecedent
    consequent ([t:0.01:numeral],[t':0.01:numeral]) :: equal
    strength 1

tSchema equalFPZeroZeroOne:(numG,numG) =
    source t:0.001:numeral
    target t':0.001:numeral
    antecedent
    consequent ([t:0.001:numeral],[t':0.001:numeral]) :: equal
    strength 1

tSchema equalX:(numG,numG) =
    source t:x:var
    target t':x:var
    antecedent
    consequent ([t:x:var],[t':x:var]) :: equal
    strength 1

tSchema equalY:(numG,numG) =
    source t:y:var
    target t':y:var
    antecedent
    consequent ([t:y:var],[t':y:var]) :: equal
    strength 1

tSchema equalZ:(numG,numG) =
    source t:z:var
    target t':z:var
    antecedent
    consequent ([t:z:var],[t':z:var]) :: equal
    strength 1

tSchema equalPlus:(numG,numG) =
    source t:numExp <- infixOp[t1:numExp,t2:plus,t3:numExp]
    target t':numExp <- infixOp[t1':numExp,t2':plus,t3':numExp]
    antecedent ([t1:numExp],[t1':numExp]) :: equal, ([t3:numExp],[t3':numExp]) :: equal
    consequent ([t:numExp],[t':numExp]) :: equal
    strength 1

tSchema equalMinus:(numG,numG) =
    source t:numExp <- infixOp[t1:numExp,t2:minus,t3:numExp]
    target t':numExp <- infixOp[t1':numExp,t2':minus,t3':numExp]
    antecedent ([t1:numExp],[t1':numExp]) :: equal, ([t3:numExp],[t3':numExp]) :: equal
    consequent ([t:numExp],[t':numExp]) :: equal
    strength 1

tSchema equalFrac:(numG,numG) =
    source t:numExp <- frac[t1:numExp,t2:div,t3:numExp]
    target t':numExp <- frac[t1':numExp,t2':div,t3':numExp]
    antecedent ([t1:numExp],[t1':numExp]) :: equal, ([t3:numExp],[t3':numExp]) :: equal
    consequent ([t:numExp],[t':numExp]) :: equal
    strength 1

tSchema equalMult:(numG,numG) =
    source t:numExp <- multiply[t1:numExp,t2:numExp]
    target t':numExp <- multiply[t1':numExp,t2':numExp]
    antecedent ([t1:numExp],[t1':numExp]) :: equal, ([t2:numExp],[t2':numExp]) :: equal
    consequent ([t:numExp],[t':numExp]) :: equal
    strength 1
