import num
import metaLogic

typeSystem interNumNumT =
    imports num, metaLogicT
    types
    order

conSpec interNumNum:interNumNumT =
    imports numG, metaLogic
    constructors
        equal : [numExp,numExp] -> metaBool

tSchema equalZero:(numG,numG,interNumNum) =
    source t:0:numeral
    target t':0:numeral
    antecedent
    consequent :metaTrue <-equal[t:0:numeral,t':0:numeral]
    strength 1

tSchema equalOne:(numG,numG,interNumNum) =
    source t:1:numeral
    target t':1:numeral
    antecedent
    consequent :metaTrue <-equal[t:1:numeral,t':1:numeral]
    strength 1

tSchema equalTwo:(numG,numG,interNumNum) =
    source t:2:numeral
    target t':2:numeral
    antecedent
    consequent :metaTrue <-equal[t:2:numeral,t':2:numeral]
    strength 1

tSchema equalThree:(numG,numG,interNumNum) =
    source t:3:numeral
    target t':3:numeral
    antecedent
    consequent :metaTrue <-equal[t:3:numeral,t':3:numeral]
    strength 1

tSchema equalFour:(numG,numG,interNumNum) =
    source t:4:numeral
    target t':4:numeral
    antecedent
    consequent :metaTrue <-equal[t:4:numeral,t':4:numeral]
    strength 1

tSchema equalFive:(numG,numG,interNumNum) =
    source t:5:numeral
    target t':5:numeral
    antecedent
    consequent :metaTrue <-equal[t:5:numeral,t':5:numeral]
    strength 1

tSchema equalSix:(numG,numG,interNumNum) =
    source t:6:numeral
    target t':6:numeral
    antecedent
    consequent :metaTrue <-equal[t:6:numeral,t':6:numeral]
    strength 1

tSchema equalSeven:(numG,numG,interNumNum) =
    source t:7:numeral
    target t':7:numeral
    antecedent
    consequent :metaTrue <-equal[t:7:numeral,t':7:numeral]
    strength 1

tSchema equalEight:(numG,numG,interNumNum) =
    source t:8:numeral
    target t':8:numeral
    antecedent
    consequent :metaTrue <-equal[t:8:numeral,t':8:numeral]
    strength 1

tSchema equalNine:(numG,numG,interNumNum) =
    source t:9:numeral
    target t':9:numeral
    antecedent
    consequent :metaTrue <-equal[t:9:numeral,t':9:numeral]
    strength 1

tSchema equalTen:(numG,numG,interNumNum) =
    source t:10:numeral
    target t':10:numeral
    antecedent
    consequent :metaTrue <-equal[t:10:numeral,t':10:numeral]
    strength 1

tSchema equalHund:(numG,numG,interNumNum) =
    source t:100:numeral
    target t':100:numeral
    antecedent
    consequent :metaTrue <-equal[t:100:numeral,t':100:numeral]
    strength 1

tSchema equalThou:(numG,numG,interNumNum) =
    source t:1000:numeral
    target t':1000:numeral
    antecedent
    consequent :metaTrue <-equal[t:1000:numeral,t':1000:numeral]
    strength 1

tSchema equalFPOne:(numG,numG,interNumNum) =
    source t:0.1:numeral
    target t':0.1:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.1:numeral,t':0.1:numeral]
    strength 1

tSchema equalFPTwo:(numG,numG,interNumNum) =
    source t:0.2:numeral
    target t':0.2:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.2:numeral,t':0.2:numeral]
    strength 1

tSchema equalFPThree:(numG,numG,interNumNum) =
    source t:0.3:numeral
    target t':0.3:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.3:numeral,t':0.3:numeral]
    strength 1

tSchema equalFPFour:(numG,numG,interNumNum) =
    source t:0.4:numeral
    target t':0.4:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.4:numeral,t':0.4:numeral]
    strength 1

tSchema equalFPFive:(numG,numG,interNumNum) =
    source t:0.5:numeral
    target t':0.5:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.5:numeral,t':0.5:numeral]
    strength 1

tSchema equalFPSix:(numG,numG,interNumNum) =
    source t:0.6:numeral
    target t':0.6:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.6:numeral,t':0.6:numeral]
    strength 1

tSchema equalFPSeven:(numG,numG,interNumNum) =
    source t:0.7:numeral
    target t':0.7:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.7:numeral,t':0.7:numeral]
    strength 1

tSchema equalFPEight:(numG,numG,interNumNum) =
    source t:0.8:numeral
    target t':0.8:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.8:numeral,t':0.8:numeral]
    strength 1

tSchema equalFPNine:(numG,numG,interNumNum) =
    source t:0.9:numeral
    target t':0.9:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.9:numeral,t':0.9:numeral]
    strength 1

tSchema equalFPTwoFive:(numG,numG,interNumNum) =
    source t:0.25:numeral
    target t':0.25:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.25:numeral,t':0.25:numeral]
    strength 1

tSchema equalFPNineNine:(numG,numG,interNumNum) =
    source t:0.99:numeral
    target t':0.99:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.99:numeral,t':0.99:numeral]
    strength 1

tSchema equalFPNineNineNine:(numG,numG,interNumNum) =
    source t:0.999:numeral
    target t':0.999:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.999:numeral,t':0.999:numeral]
    strength 1

tSchema equalFPZeroOne:(numG,numG,interNumNum) =
    source t:0.01:numeral
    target t':0.01:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.01:numeral,t':0.01:numeral]
    strength 1

tSchema equalFPZeroZeroOne:(numG,numG,interNumNum) =
    source t:0.001:numeral
    target t':0.001:numeral
    antecedent
    consequent :metaTrue <-equal[t:0.001:numeral,t':0.001:numeral]
    strength 1

tSchema equalX:(numG,numG,interNumNum) =
    source t:x:var
    target t':x:var
    antecedent
    consequent :metaTrue <-equal[t:x:var,t':x:var]
    strength 1

tSchema equalY:(numG,numG,interNumNum) =
    source t:y:var
    target t':y:var
    antecedent
    consequent :metaTrue <-equal[t:y:var,t':y:var]
    strength 1

tSchema equalZ:(numG,numG,interNumNum) =
    source t:z:var
    target t':z:var
    antecedent
    consequent :metaTrue <-equal[t:z:var,t':z:var]
    strength 1

tSchema equalPlus:(numG,numG,interNumNum) =
    source t:numExp <- infixOp[t1:numExp,t2:plus,t3:numExp]
    target t':numExp <- infixOp[t1':numExp,t2':plus,t3':numExp]
    antecedent :metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]
    consequent :metaTrue <-equal[t:numExp,t':numExp]
    strength 1

tSchema equalMinus:(numG,numG,interNumNum) =
    source t:numExp <- infixOp[t1:numExp,t2:minus,t3:numExp]
    target t':numExp <- infixOp[t1':numExp,t2':minus,t3':numExp]
    antecedent :metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]
    consequent :metaTrue <-equal[t:numExp,t':numExp]
    strength 1

tSchema equalFrac:(numG,numG,interNumNum) =
    source t:numExp <- frac[t1:numExp,t2:div,t3:numExp]
    target t':numExp <- frac[t1':numExp,t2':div,t3':numExp]
    antecedent :metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t3:numExp,t3':numExp]
    consequent :metaTrue <-equal[t:numExp,t':numExp]
    strength 1

tSchema equalMult:(numG,numG,interNumNum) =
    source t:numExp <- implicitMult[t1:numExp,t2:numExp]
    target t':numExp <- implicitMult[t1':numExp,t2':numExp]
    antecedent :metaTrue <-equal[t1:numExp,t1':numExp],
               :metaTrue <-equal[t2:numExp,t2':numExp]
    consequent :metaTrue <-equal[t:numExp,t':numExp]
    strength 1