import bayes
import areaDiagram
import transferSchemas/numNum

tSchema eventA:(bayesG,areaDiagramG) =
    source t:A:event
    target t':A:tag
    antecedent
    consequent ([t:A:event],[t':A:tag]) :: match
    strength 1

tSchema eventB:(bayesG,areaDiagramG) =
    source t:B:event
    target t':B:tag
    antecedent
    consequent ([t:B:event],[t':B:tag]) :: match
    strength 1

tSchema notEvent:(bayesG,areaDiagramG) =
    source t:event <- complement[t1:overline,t2:event]
    target t':tag <- reverseTag[t1':tag]
    antecedent ([t2:event],[t1':tag]) :: match
    consequent ([t:event],[t':tag]) :: match
    strength 1

tSchema constructEvent:(bayesG,areaDiagramG) =
    source t:probEqn <- makeEqn[t1:events,t2:numExp]
    target t':area <- overlayRect[t1':empty,
                                  t2':rect <- cRect[t21':point <- cPoint[t211':0:numeral,t212':0:numeral],
                                                    t22':point <- cPoint[t221':numExp,t222':1:numeral]],
                                  t3':tag,
                                  t4':pattern]
    antecedent ([t1:events],[t3':tag]) :: match, ([t2:numExp],[t221':numExp]) :: equal
    consequent ([t:probEqn],[t':area]) :: encode
    strength 1

tSchema constructCond:(bayesG,areaDiagramG) =
    source t:probEqn <- makeEqn[t1:condEvent <- makeCond[t11:event,t12:event],
                             t2:numExp]
    target t':area <- overlayRect[t1':area <- overlayRect[t11':empty,
                                                          t12':rect<- cRect[t121':point <- cPoint[t1211':0:numeral,t1212':0:numeral],
                                                                            t122':point <- cPoint[t1221':x:var,t1222':1:numeral]],
                                                          t13':tag,
                                                          t14':blue],
                                  t2':rect <- cRect[t21':point <- cPoint[t211':0:numeral,t212':0:numeral],
                                                    t22':point <- cPoint[t1221':x:var,t222':numExp]],
                                  t3':tag,
                                  t4':pattern]
    antecedent ([t12:event],[t13':tag]) :: match, ([t11:event],[t3':tag]) :: match, ([t2:numExp],[t222':numExp]) :: equal
    consequent ([t:probEqn],[t':area]) :: encode
    strength 1

tSchema constructInter:(bayesG,areaDiagramG) =
    source t:probEqn <- makeEqn[t1:event <- infix[t11:event,t12:inter,t13:event],
                             t2:numExp]
    target t':area <- overlayRect[t1':area <- overlayRect[t11':empty,
                                                          t12':rect<- cRect[t121':point <- cPoint[t1211':0:numeral,t1212':0:numeral],
                                                                            t122':point <- cPoint[t1221':y:var,t1222':1:numeral]],
                                                          t13':tag,
                                                          t14':white],
                                  t2':rect <- cRect[t21':point <- cPoint[t211':0:numeral,t212':0:numeral],
                                                    t22':point <- cPoint[t1221':y:var,
                                                                         t222':numExp <- frac[t2221':numExp,t2222':div,t1221':y:var]]],
                                  t3':tag,
                                  t4':pattern]
    antecedent ([t11:event],[t13':tag]) :: match, ([t13:event],[t3':tag]) :: match, ([t2:numExp],[t2221':numExp]) :: equal
    consequent ([t:probEqn],[t':area]) :: encode
    strength 1

tSchema combineEqn:(bayesG,areaDiagramG) =
    source t:probSys <- addEqn[t1:probEqn,t2:probSys]
    target t':area <- combine[t1':area,t2':area]
    antecedent ([t1:probEqn],[t1':area]) :: encode, ([t2:probSys],[t2':area]) :: encode
    consequent ([t:probSys],[t':area]) :: encode
    strength 1
