import metaLogic

typeSystem stringT =
    types  oB, cB, B, _:nonBChar, char, empty, _:string
    order oB < B, cB < B, B < char, nonBChar < char, empty < string

conSpec string:stringT =
    constructors
        cons : [char, string] -> string

typeSystem btreeT =
    imports stringT
    types _:leaf, _:btree
    order char < leaf, leaf < btree

conSpec btree:btreeT =
    constructors
        branch : [btree, btree] -> btree

typeSystem freeT =
    types _:free


typeSystem interStringBTreeT =
    imports stringT, btreeT, freeT, metaLogicT

conSpec interStringBTree:interStringBTreeT =
    constructors
        TREEIFY : [string,btree] -> metaBool,
        ATOM : [char,btree] -> metaBool,
        LEVEL : [free,string,btree] -> metaBool


typeSystem interBTreeBTreeT =
    imports btreeT, metaLogicT, freeT

conSpec interBTreeBTree:interBTreeBTreeT =
    constructors
        TOKENISE : [char,btree,btree] -> metaBool,
        HEAD : [char,btree,btree] -> metaBool,
        TAIL : [char,btree,btree] -> metaBool,
        EQCHAR : [nonBChar,nonBChar] -> metaBool,
        SEMICOLON : [btree,btree] -> metaBool,
        SPACE : [btree,btree] -> metaBool,
        SIMPLIFY : [btree,btree] -> metaBool,
        MID : [btree,btree] -> metaBool


tSchema treeify:(string,btree,interStringBTree) =
    source t:string
    target t':btree
    antecedent :metaTrue <- LEVEL[x:0:free,t:string,t':btree]
    consequent :metaTrue <- TREEIFY[t:string,t':btree]
    strength 2

tSchema oBL0:(string,btree,interStringBTree) =
    source t:string <- cons[t1:oB, t2:string]
    target t':btree <- branch[t1':btree, t2':btree]
    antecedent :metaTrue <- LEVEL[x:0:free,t2:string,t1':btree],
               :metaTrue <- LEVEL[x:1:free,t2:string,t2':btree]
    consequent :metaTrue <- LEVEL[x:0:free,t:string,t':btree]
    strength 1

tSchema oBL1:(string,btree,interStringBTree) =
    source t:string <- cons[t1:oB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:2:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:1:free,t:string,t':btree]
    strength 0

tSchema oBL2:(string,btree,interStringBTree) =
    source t:string <- cons[t1:oB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:3:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:2:free,t:string,t':btree]
    strength 0

tSchema oBL3:(string,btree,interStringBTree) =
    source t:string <- cons[t1:oB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:4:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:3:free,t:string,t':btree]
    strength 0


tSchema cBL0:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':dummy:leaf
    antecedent
    consequent :metaTrue <- LEVEL[x:0:free,t:string,t':dummy:leaf]
    strength 1

tSchema cBL1:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:0:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:1:free,t:string,t':btree]
    strength 0

tSchema cBL2:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:1:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:2:free,t:string,t':btree]
    strength 0

tSchema cBL3:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:2:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:3:free,t:string,t':btree]
    strength 0

tSchema cBL4:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:3:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:4:free,t:string,t':btree]
    strength 0


tSchema nBL0:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonBChar, t2:string]
    target t':btree <- branch[t1':leaf, t2':btree]
    antecedent :metaTrue <- ATOM[t1:nonBChar,t1':leaf],
               :metaTrue <- LEVEL[x:0:free,t2:string,t2':btree]
    consequent :metaTrue <- LEVEL[x:0:free,t:string,t':btree]
    strength 1

tSchema nBL1:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonBChar, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:1:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:1:free,t:string,t':btree]
    strength 0

tSchema nBL2:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonBChar, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:2:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:2:free,t:string,t':btree]
    strength 0

tSchema nBL3:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonBChar, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:3:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:3:free,t:string,t':btree]
    strength 0

tSchema nBL4:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonBChar, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL[x:4:free,t2:string,t':btree]
    consequent :metaTrue <- LEVEL[x:4:free,t:string,t':btree]
    strength 0


tSchema leafL0:(string,btree,interStringBTree) =
    source t:?x:nonBChar
    target t':?x:nonBChar
    antecedent
    consequent :metaTrue <- ATOM[t:?x:nonBChar,t':?x:nonBChar]
    strength 1

tSchema empty:(string,btree,interStringBTree) =
    source t:empty
    target t':dummy:leaf
    antecedent
    consequent :metaTrue <- LEVEL[x:0:free,t:empty,t':dummy:leaf]
    strength 1



tSchema tokeniseChar:(btree,btree,interBTreeBTree) =
    source t:?x:nonBChar
    target t':?x:nonBChar
    antecedent
    consequent :metaTrue <- TOKENISE[z:?v:nonBChar,t:?x:nonBChar,t':?x:nonBChar]
    strength 1

tSchema restart:(btree,btree,interBTreeBTree) =
    source t:btree <- branch[t1:?v:nonBChar,
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- TOKENISE[z:?v:nonBChar,t2:btree,t':btree]
    consequent :metaTrue <- TAIL[z:?v:nonBChar,t:btree,t':btree]
    strength 4

tSchema end:(btree,btree,interBTreeBTree) =
    source t:btree <- branch[t1:?v:nonBChar,
                             t2:btree]
    target t':dummy:leaf
    antecedent
    consequent :metaTrue <- HEAD[z:?v:nonBChar,t:btree,t':dummy:leaf]
    strength 20

tSchema copyAtHead:(btree,btree,interBTreeBTree) =
    source t:?v:nonBChar
    target t':?v:nonBChar
    antecedent
    consequent :metaTrue <- HEAD[z:?x:nonBChar,t:?v:nonBChar,t':?v:nonBChar]
    strength 2

tSchema skipUntilTail:(btree,btree,interBTreeBTree) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- TAIL[z:?x:nonBChar,t2:btree,t':btree]
    consequent :metaTrue <- TAIL[z:?x:nonBChar,t:btree,t':btree]
    strength 0

tSchema eqChars:(btree,btree,interBTreeBTree) =
    source t:?x:nonBChar
    target t':?x:nonBChar
    antecedent
    consequent :metaTrue <- EQCHAR[t:?x:nonBChar,t':?x:nonBChar]
    strength 1


tSchema dumms1:(btree,btree,interBTreeBTree) =
    source t:nonBChar
    target t':dummy:leaf
    antecedent
    consequent :metaTrue <- TAIL[z:?x:nonBChar,t:nonBChar,t':dummy:leaf]
    strength 1

tSchema start:(btree,btree,interBTreeBTree) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- HEAD[z:?x:nonBChar,t:btree,t1':btree],
               :metaTrue <- TAIL[z:?x:nonBChar,t2:btree,t2':btree]
    consequent :metaTrue <- TOKENISE[z:?x:nonBChar,t:btree,t':btree]
    strength 1

tSchema branchHead:(btree,btree,interBTreeBTree) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- TOKENISE[z:?x:nonBChar,t1:btree,t1':btree],
               :metaTrue <- HEAD[z:?x:nonBChar,t2:btree,t2':btree]
    consequent :metaTrue <- HEAD[z:?x:nonBChar,t:btree,t':btree]
    strength 2

tSchema semicolonStart:(btree,btree,interBTreeBTree) =
    source t:btree
    target t':btree
    antecedent :metaTrue <- TOKENISE[z:;:nonBChar,t:btree,t':btree]
    consequent :metaTrue <- SEMICOLON[t:btree,t':btree]
    strength 1

tSchema spaceStart:(btree,btree,interBTreeBTree) =
    source t:btree
    target t':btree
    antecedent :metaTrue <- TOKENISE[z: :nonBChar,t:btree,t':btree]
    consequent :metaTrue <- SPACE[t:btree,t':btree]
    strength 1

tSchema midStart:(btree,btree,interBTreeBTree) =
    source t:btree
    target t':btree
    antecedent :metaTrue <- TOKENISE[z:|:nonBChar,t:btree,t':btree]
    consequent :metaTrue <- MID[t:btree,t':btree]
    strength 1



tSchema simplifyDumms:(btree,btree,interBTreeBTree) =
    source t:btree <- branch[t1:btree,
                             t2:dummy:leaf]
    target t':btree
    antecedent :metaTrue <- SIMPLIFY[t1:btree,t':btree]
    consequent :metaTrue <- SIMPLIFY[t:btree,t':btree]
    strength 3

tSchema simplifyBranch:(btree,btree,interBTreeBTree) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- SIMPLIFY[t1:btree,t1':btree],
               :metaTrue <- SIMPLIFY[t2:btree,t2':btree]
    consequent :metaTrue <- SIMPLIFY[t:btree,t':btree]
    strength 2

tSchema simplifyNonBChar:(btree,btree,interBTreeBTree) =
    source t:?x:nonBChar
    target t':?x:nonBChar
    antecedent
    consequent :metaTrue <- SIMPLIFY[t:?x:nonBChar,t':?x:nonBChar]
    strength 1


construction string1:string = liftString a(((b)c)d)
construction string2:string = liftString ()((ab))
construction string3:string = liftString a(bc(def))g
construction string4:string = liftString a(bc())d
construction string5:string = liftString aa & (b U event2)
