import metaLogic

typeSystem charOrdinaryT =
    types char, _:ordinary
    order ordinary < char

typeSystem charBT =
    imports charOrdinaryT
    types oB, cB, nonB
    order ordinary < nonB, nonB < char, oB < char, cB < char

typeSystem charSpaceT =
    imports charOrdinaryT
    types space, nonSpace, char
    order ordinary < nonSpace, nonSpace < char, space < char,

typeSystem charSemicolonT =
    imports charOrdinaryT
    types semicolon, nonSemicolon, char
    order ordinary < nonSemicolon, semicolon < char, nonSemicolon < char

typeSystem charMidT =
    imports charOrdinaryT
    types mid, nonMid, char
    order ordinary < nonMid, mid < char, nonMid < char

typeSystem charT =
    imports charBT, charSpaceT, charSemicolonT, charMidT
    order space < nonB, space < nonMid, space < nonSemicolon,
          semicolon < nonB, semicolon < nonMid, semicolon < nonSpace,
          mid < nonB, mid < nonSpace, mid < nonSemicolon

typeSystem stringT =
    imports charT
    types empty, _:string
    order empty < string

conSpec string:stringT =
    constructors
        cons : [char, string] -> string

typeSystem btreeT =
    imports stringT
    types leaf, _:btree, dummy
    order char < leaf, leaf < btree, dummy < leaf

conSpec btree:btreeT =
    constructors
        branch : [btree, btree] -> btree

typeSystem freeT =
    types _:free


typeSystem interStringBTreeT =
    imports stringT, btreeT, metaLogicT

conSpec interStringBTree:interStringBTreeT =
    constructors
        TREEIFY : [string,btree] -> metaBool,
        ATOM : [char,leaf] -> metaBool,
        LEVEL0 : [string,btree] -> metaBool,
        LEVEL1 : [string,btree] -> metaBool,
        LEVEL2 : [string,btree] -> metaBool,
        LEVEL3 : [string,btree] -> metaBool,
        LEVEL4 : [string,btree] -> metaBool


typeSystem interBTreeBTreeT =
    imports btreeT, metaLogicT

conSpec interBTreeBTreeMID:interBTreeBTreeT =
    constructors
        headMID : [btree,btree] -> metaBool,
        tailMID : [btree,btree] -> metaBool,
        MID : [btree,btree] -> metaBool

conSpec interBTreeBTreeSPACE:interBTreeBTreeT =
    constructors
        headSPACE : [btree,btree] -> metaBool,
        tailSPACE : [btree,btree] -> metaBool,
        SPACE : [btree,btree] -> metaBool

conSpec interBTreeBTreeSEMICOLON:interBTreeBTreeT =
    constructors
        headSEMICOLON : [btree,btree] -> metaBool,
        tailSEMICOLON : [btree,btree] -> metaBool,
        SEMICOLON : [btree,btree] -> metaBool

conSpec interBTreeBTreeSIMPLIFY:interBTreeBTreeT =
    constructors
        SIMPLIFY : [btree,btree] -> metaBool


tSchema treeify:(string,btree,interStringBTree) =
    source t:string
    target t':btree
    antecedent :metaTrue <- LEVEL0[t:string,t':btree]
    consequent :metaTrue <- TREEIFY[t:string,t':btree]
    strength 0

tSchema oBL0:(string,btree,interStringBTree) =
    source t:string <- cons[t1:oB, t2:string]
    target t':btree <- branch[t1':btree, t2':btree]
    antecedent :metaTrue <- LEVEL0[t2:string,t1':btree],
               :metaTrue <- LEVEL1[t2:string,t2':btree]
    consequent :metaTrue <- LEVEL0[t:string,t':btree]
    strength 2

tSchema oBL1:(string,btree,interStringBTree) =
    source t:string <- cons[t1:oB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL2[t2:string,t':btree]
    consequent :metaTrue <- LEVEL1[t:string,t':btree]
    strength 1

tSchema oBL2:(string,btree,interStringBTree) =
    source t:string <- cons[t1:oB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL3[t2:string,t':btree]
    consequent :metaTrue <- LEVEL2[t:string,t':btree]
    strength 1

tSchema oBL3:(string,btree,interStringBTree) =
    source t:string <- cons[t1:oB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL4[t2:string,t':btree]
    consequent :metaTrue <- LEVEL3[t:string,t':btree]
    strength 1


tSchema cBL0:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':dummy
    antecedent
    consequent :metaTrue <- LEVEL0[t:string,t':dummy]
    strength 2

tSchema cBL1:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL0[t2:string,t':btree]
    consequent :metaTrue <- LEVEL1[t:string,t':btree]
    strength 1

tSchema cBL2:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL1[t2:string,t':btree]
    consequent :metaTrue <- LEVEL2[t:string,t':btree]
    strength 1

tSchema cBL3:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL2[t2:string,t':btree]
    consequent :metaTrue <- LEVEL3[t:string,t':btree]
    strength 1

tSchema cBL4:(string,btree,interStringBTree) =
    source t:string <- cons[t1:cB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL3[t2:string,t':btree]
    consequent :metaTrue <- LEVEL4[t:string,t':btree]
    strength 1


tSchema nBL0:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonB, t2:string]
    target t':btree <- branch[t1':leaf, t2':btree]
    antecedent :metaTrue <- ATOM[t1:nonB,t1':leaf],
               :metaTrue <- LEVEL0[t2:string,t2':btree]
    consequent :metaTrue <- LEVEL0[t:string,t':btree]
    strength 5

tSchema nBL1:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL1[t2:string,t':btree]
    consequent :metaTrue <- LEVEL1[t:string,t':btree]
    strength 4

tSchema nBL2:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL2[t2:string,t':btree]
    consequent :metaTrue <- LEVEL2[t:string,t':btree]
    strength 1

tSchema nBL3:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL3[t2:string,t':btree]
    consequent :metaTrue <- LEVEL3[t:string,t':btree]
    strength 1

tSchema nBL4:(string,btree,interStringBTree) =
    source t:string <- cons[t1:nonB, t2:string]
    target t':btree
    antecedent :metaTrue <- LEVEL4[t2:string,t':btree]
    consequent :metaTrue <- LEVEL4[t:string,t':btree]
    strength 1


tSchema atomMid:(string,btree,interStringBTree) =
    source t:mid
    target t':mid
    antecedent
    consequent :metaTrue <- ATOM[t:mid,t':mid]
    strength 0

tSchema atomSpace:(string,btree,interStringBTree) =
    source t:space
    target t':space
    antecedent
    consequent :metaTrue <- ATOM[t:space,t':space]
    strength 1

tSchema atomSemicolon:(string,btree,interStringBTree) =
    source t:semicolon
    target t':semicolon
    antecedent
    consequent :metaTrue <- ATOM[t:semicolon,t':semicolon]
    strength 0

tSchema atomNonB:(string,btree,interStringBTree) =
    source t:?x:ordinary
    target t':?x:ordinary
    antecedent
    consequent :metaTrue <- ATOM[t:?x:ordinary,t':?x:ordinary]
    strength 2

tSchema empty:(string,btree,interStringBTree) =
    source t:empty
    target t':dummy
    antecedent
    consequent :metaTrue <- LEVEL0[t:empty,t':dummy]
    strength 0



tSchema tokeniseSCChar:(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:?x:ordinary
    target t':?x:ordinary
    antecedent
    consequent :metaTrue <- SEMICOLON[t:?x:ordinary,t':?x:ordinary]
    strength 1
tSchema tokeniseSCSp:(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:space
    target t':space
    antecedent
    consequent :metaTrue <- SEMICOLON[t:space,t':space]
    strength 0
tSchema tokeniseSCMid':(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:mid
    target t':mid
    antecedent
    consequent :metaTrue <- SEMICOLON[t:mid,t':mid]
    strength 0

tSchema tokeniseSpChar:(btree,btree,interBTreeBTreeSPACE) =
    source t:?x:ordinary
    target t':?x:ordinary
    antecedent
    consequent :metaTrue <- SPACE[t:?x:ordinary,t':?x:ordinary]
    strength 1
comment tokeniseSpSC:(btree,btree,interBTreeBTreeSPACE) =
    source t:semicolon
    target t':semicolon
    antecedent
    consequent :metaTrue <- SPACE[t:semicolon,t':semicolon]
    strength 0
tSchema tokeniseSpMid':(btree,btree,interBTreeBTreeSPACE) =
    source t:mid
    target t':mid
    antecedent
    consequent :metaTrue <- SPACE[t:mid,t':mid]
    strength 0

tSchema tokeniseMidChar:(btree,btree,interBTreeBTreeMID) =
    source t:?x:ordinary
    target t':?x:ordinary
    antecedent
    consequent :metaTrue <- MID[t:?x:ordinary,t':?x:ordinary]
    strength 1
comment tokeniseMidSC:(btree,btree,interBTreeBTreeMID) =
    source t:semicolon
    target t':semicolon
    antecedent
    consequent :metaTrue <- MID[t:semicolon,t':semicolon]
    strength 0
comment tokeniseMidSp:(btree,btree,interBTreeBTreeMID) =
    source t:space
    target t':space
    antecedent
    consequent :metaTrue <- MID[t:space,t':space]
    strength 0


tSchema restart:(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:btree <- branch[t1:semicolon,
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- SEMICOLON[t2:btree,t':btree]
    consequent :metaTrue <- tailSEMICOLON[t:btree,t':btree]
    strength 1
tSchema restart':(btree,btree,interBTreeBTreeSPACE) =
    source t:btree <- branch[t1:space,
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- SPACE[t2:btree,t':btree]
    consequent :metaTrue <- tailSPACE[t:btree,t':btree]
    strength 1
tSchema restart'':(btree,btree,interBTreeBTreeMID) =
    source t:btree <- branch[t1:mid,
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- MID[t2:btree,t':btree]
    consequent :metaTrue <- tailMID[t:btree,t':btree]
    strength 1

tSchema end:(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:btree <- branch[t1:semicolon,
                             t2:btree]
    target t':dummy
    antecedent
    consequent :metaTrue <- headSEMICOLON[t:btree,t':dummy]
    strength 0
tSchema end':(btree,btree,interBTreeBTreeSPACE) =
    source t:btree <- branch[t1:space,
                             t2:btree]
    target t':dummy
    antecedent
    consequent :metaTrue <- headSPACE[t:btree,t':dummy]
    strength 0
tSchema end'':(btree,btree,interBTreeBTreeMID) =
    source t:btree <- branch[t1:mid,
                             t2:btree]
    target t':dummy
    antecedent
    consequent :metaTrue <- headMID[t:btree,t':dummy]
    strength 0

tSchema copyAtHead:(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:?v:ordinary
    target t':?v:ordinary
    antecedent
    consequent :metaTrue <- headSEMICOLON[t:?v:ordinary,t':?v:ordinary]
    strength 4
tSchema copyAtHead':(btree,btree,interBTreeBTreeSPACE) =
    source t:?v:ordinary
    target t':?v:ordinary
    antecedent
    consequent :metaTrue <- headSPACE[t:?v:ordinary,t':?v:ordinary]
    strength 4
tSchema copyAtHead'':(btree,btree,interBTreeBTreeMID) =
    source t:?v:ordinary
    target t':?v:ordinary
    antecedent
    consequent :metaTrue <- headMID[t:?v:ordinary,t':?v:ordinary]
    strength 4

tSchema skipUntilTailSemicolon:(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:btree <- branch[t1:nonSemicolon,
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- tailSEMICOLON[t2:btree,t':btree]
    consequent :metaTrue <- tailSEMICOLON[t:btree,t':btree]
    strength 5
tSchema skipUntilTailSemicolon':(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:btree <- branch[t1:btree <- branch[t11:btree,t12:btree],
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- tailSEMICOLON[t2:btree,t':btree]
    consequent :metaTrue <- tailSEMICOLON[t:btree,t':btree]
    strength 5
tSchema skipUntilTailSpace:(btree,btree,interBTreeBTreeSPACE) =
    source t:btree <- branch[t1:nonSpace,
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- tailSPACE[t2:btree,t':btree]
    consequent :metaTrue <- tailSPACE[t:btree,t':btree]
    strength 5
tSchema skipUntilTailSpace':(btree,btree,interBTreeBTreeSPACE) =
    source t:btree <- branch[t1:btree <- branch[t11:btree,t12:btree],
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- tailSPACE[t2:btree,t':btree]
    consequent :metaTrue <- tailSPACE[t:btree,t':btree]
    strength 5
tSchema skipUntilTailMid:(btree,btree,interBTreeBTreeMID) =
    source t:btree <- branch[t1:nonMid,
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- tailMID[t2:btree,t':btree]
    consequent :metaTrue <- tailMID[t:btree,t':btree]
    strength 5
tSchema skipUntilTailMid':(btree,btree,interBTreeBTreeMID) =
    source t:btree <- branch[t1:btree <- branch[t11:btree,t12:btree],
                             t2:btree]
    target t':btree
    antecedent :metaTrue <- tailMID[t2:btree,t':btree]
    consequent :metaTrue <- tailMID[t:btree,t':btree]
    strength 5


tSchema dummTail:(btree,btree,interBTreeBTreeSPACE) =
    source t:ordinary
    target t':dummy
    antecedent
    consequent :metaTrue <- tailSPACE[t:ordinary,t':dummy]
    strength 0
tSchema dummsTail':(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:ordinary
    target t':dummy
    antecedent
    consequent :metaTrue <- tailSEMICOLON[t:ordinary,t':dummy]
    strength 0
tSchema dummsTail'':(btree,btree,interBTreeBTreeMID) =
    source t:ordinary
    target t':dummy
    antecedent
    consequent :metaTrue <- tailMID[t:ordinary,t':dummy]
    strength 0


tSchema start:(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- headSEMICOLON[t:btree,t1':btree],
               :metaTrue <- tailSEMICOLON[t2:btree,t2':btree]
    consequent :metaTrue <- SEMICOLON[t:btree,t':btree]
    strength 1
tSchema start':(btree,btree,interBTreeBTreeSPACE) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- headSPACE[t:btree,t1':btree],
               :metaTrue <- tailSPACE[t2:btree,t2':btree]
    consequent :metaTrue <- SPACE[t:btree,t':btree]
    strength 1
tSchema start'':(btree,btree,interBTreeBTreeMID) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- headMID[t:btree,t1':btree],
               :metaTrue <- tailMID[t2:btree,t2':btree]
    consequent :metaTrue <- MID[t:btree,t':btree]
    strength 1

tSchema branchHead:(btree,btree,interBTreeBTreeSEMICOLON) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- SEMICOLON[t1:btree,t1':btree],
               :metaTrue <- headSEMICOLON[t2:btree,t2':btree]
    consequent :metaTrue <- headSEMICOLON[t:btree,t':btree]
    strength 3
tSchema branchHead':(btree,btree,interBTreeBTreeSPACE) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- SPACE[t1:btree,t1':btree],
               :metaTrue <- headSPACE[t2:btree,t2':btree]
    consequent :metaTrue <- headSPACE[t:btree,t':btree]
    strength 3
tSchema branchHead'':(btree,btree,interBTreeBTreeMID) =
    source t:btree <- branch[t1:btree,
                             t2:btree]
    target t':btree <- branch[t1':btree,
                              t2':btree]
    antecedent :metaTrue <- MID[t1:btree,t1':btree],
               :metaTrue <- headMID[t2:btree,t2':btree]
    consequent :metaTrue <- headMID[t:btree,t':btree]
    strength 3





tSchema simplifyDumms:(btree,btree,interBTreeBTreeSIMPLIFY) =
    source t:btree <- branch[t1:btree,t2:dummy]
    target t':btree
    antecedent :metaTrue <- SIMPLIFY[t1:btree,t':btree]
    consequent :metaTrue <- SIMPLIFY[t:btree,t':btree]
    strength 3

tSchema simplifyBranch:(btree,btree,interBTreeBTreeSIMPLIFY) =
    source t:btree <- branch[t1:btree,t2:btree]
    target t':btree <- branch[t1':btree,t2':btree]
    antecedent :metaTrue <- SIMPLIFY[t1:btree,t1':btree],
               :metaTrue <- SIMPLIFY[t2:btree,t2':btree]
    consequent :metaTrue <- SIMPLIFY[t:btree,t':btree]
    strength 2

tSchema simplifyNonBChar:(btree,btree,interBTreeBTreeSIMPLIFY) =
    source t:?x:ordinary
    target t':?x:ordinary
    antecedent
    consequent :metaTrue <- SIMPLIFY[t:?x:ordinary,t':?x:ordinary]
    strength 4

tSchema simplifySemicolon:(btree,btree,interBTreeBTreeSIMPLIFY) =
    source t:semicolon
    target t':semicolon
    antecedent
    consequent :metaTrue <- SIMPLIFY[t:semicolon,t':semicolon]
    strength 0

tSchema simplifySpace:(btree,btree,interBTreeBTreeSIMPLIFY) =
    source t:space
    target t':space
    antecedent
    consequent :metaTrue <- SIMPLIFY[t:space,t':space]
    strength 1

tSchema simplifyMid:(btree,btree,interBTreeBTreeSIMPLIFY) =
    source t:mid
    target t':mid
    antecedent
    consequent :metaTrue <- SIMPLIFY[t:mid,t':mid]
    strength 0


construction string1:string = liftString a(((b)c)d)
construction string2:string = liftString ()((ab))
construction string3:string = liftString a(bc(def))g
construction string4:string = liftString a(bc())d
construction string5:string = liftString aa & (b U event2)
